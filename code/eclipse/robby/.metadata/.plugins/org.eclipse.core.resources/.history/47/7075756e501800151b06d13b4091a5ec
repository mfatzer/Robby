/*
 * Timer1.cpp
 *
 *  Created on: 21.06.2015
 *      Author: Martin
 */

#include "TimerC.h"
#include "Arduino.h"


const unsigned int MIN_SPEED_PERIOD = 65535;
TimerC LeoTimer3;


ISR(TIMER1_COMPA_vect) {
	LeoTimer1.runISR();
}

TimerC::TimerC()
: m_logger("Timer1")
{
	m_isr = NULL;
}

TimerC::~TimerC() {
}

// Timer Prescaler auf 8 -> 2MHz
// TimerCounter wird automatisch geresettet
// TimerCounter wird auf 0 gesetzt
void TimerC::initialize() {
	TCCR1A = 0;
	TCCR1B = (1 << WGM12) | (1 << CS11);
	setTimerPeriod(MIN_SPEED_PERIOD);
	resetTimer();
	m_logger.log("initialize()");
}

void TimerC::setISR(void (*isr)(void)) {
	m_isr = isr;
	m_logger.log("setISR()");
}

void TimerC::runISR() {
	if (m_isr != NULL) {
		(*m_isr)();
		m_logger.log("runISR()");
	}
	else {
		m_logger.log("runISR() NULL");
	}
}

void TimerC::enableInterrupt() {
	TIMSK1 |= (1 << OCIE1A);
	m_logger.log("enableInterrupt()");
}

void TimerC::disableInterrupt() {
	TIMSK1 &= ~(1 << OCIE1A);
	m_logger.log("disableInterrupt()");
}

void TimerC::setTimerPeriod(unsigned int period) {
	if (period > MIN_SPEED_PERIOD) {
		period = MIN_SPEED_PERIOD;
	}
	OCR1A = period;
	if (TCNT1 > period) {
		resetTimer();
	}
	m_logger.log("setTimerPeriod()");
}

void TimerC::resetTimer() {
	TCNT1 = 0;
	m_logger.log("resetTimer()");
}
